#!/usr/bin/env python
# -*- coding: utf-8 -*-

#
# Generated Tue Mar 22 11:56:52 2016 by generateDS.py version 2.20a.
#
# Command line options:
#   ('-o', 'pain001_cut.py')
#   ('-s', 'pain001_cutSub.py')
#   ('--super', 'pain001_cut')
#   ('--member-specs', 'dict')
#   ('--export', 'write etree')
#
# Command line arguments:
#   pain_cutted.xsd
#
# Command line:
#   c:\Python27\Scripts\generateDS.py -o "pain001_cut.py" -s "pain001_cutSub.py" --super="pain001_cut" --member-specs="dict" --export="write etree" pain_cutted.xsd
#
# Current working directory (os.getcwd()):
#   xsd
#

import sys
import re as re_
import base64
import datetime as datetime_
import warnings as warnings_
from lxml import etree as etree_

Validate_simpletypes_ = True
if sys.version_info.major == 2:
    BaseStrType_ = basestring
else:
    BaseStrType_ = str


def parsexml_(infile, parser=None, **kwargs):
    if parser is None:
        # Use the lxml ElementTree compatible parser so that, e.g.,
        #   we ignore comments.
        parser = etree_.ETCompatXMLParser()
    doc = etree_.parse(infile, parser=parser, **kwargs)
    return doc


#
# User methods
#
# Calls to the methods in these classes are generated by generateDS.py.
# You can replace these methods by re-implementing the following class
#   in a module named generatedssuper.py.

try:
    from generatedssuper import GeneratedsSuper
except ImportError as exp:

    class GeneratedsSuper(object):
        tzoff_pattern = re_.compile(r'(\+|-)((0\d|1[0-3]):[0-5]\d|14:00)$')

        class _FixedOffsetTZ(datetime_.tzinfo):
            def __init__(self, offset, name):
                self.__offset = datetime_.timedelta(minutes=offset)
                self.__name = name

            def utcoffset(self, dt):
                return self.__offset

            def tzname(self, dt):
                return self.__name

            def dst(self, dt):
                return None

        def gds_format_string(self, input_data, input_name=''):
            return input_data

        def gds_validate_string(self, input_data, node=None, input_name=''):
            if not input_data:
                return ''
            else:
                return input_data

        def gds_format_base64(self, input_data, input_name=''):
            return base64.b64encode(input_data)

        def gds_validate_base64(self, input_data, node=None, input_name=''):
            return input_data

        def gds_format_integer(self, input_data, input_name=''):
            return '%d' % input_data

        def gds_validate_integer(self, input_data, node=None, input_name=''):
            return input_data

        def gds_format_integer_list(self, input_data, input_name=''):
            return '%s' % ' '.join(input_data)

        def gds_validate_integer_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    int(value)
                except (TypeError, ValueError):
                    raise_parse_error(node, 'Requires sequence of integers')
            return values

        def gds_format_float(self, input_data, input_name=''):
            return ('%.15f' % input_data).rstrip('0')

        def gds_validate_float(self, input_data, node=None, input_name=''):
            return input_data

        def gds_format_float_list(self, input_data, input_name=''):
            return '%s' % ' '.join(input_data)

        def gds_validate_float_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    float(value)
                except (TypeError, ValueError):
                    raise_parse_error(node, 'Requires sequence of floats')
            return values

        def gds_format_double(self, input_data, input_name=''):
            return '%e' % input_data

        def gds_validate_double(self, input_data, node=None, input_name=''):
            return input_data

        def gds_format_double_list(self, input_data, input_name=''):
            return '%s' % ' '.join(input_data)

        def gds_validate_double_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    float(value)
                except (TypeError, ValueError):
                    raise_parse_error(node, 'Requires sequence of doubles')
            return values

        def gds_format_boolean(self, input_data, input_name=''):
            return ('%s' % input_data).lower()

        def gds_validate_boolean(self, input_data, node=None, input_name=''):
            return input_data

        def gds_format_boolean_list(self, input_data, input_name=''):
            return '%s' % ' '.join(input_data)

        def gds_validate_boolean_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                if value not in ('true', '1', 'false', '0',):
                    raise_parse_error(
                        node,
                        'Requires sequence of booleans '
                        '("true", "1", "false", "0")')
            return values

        def gds_validate_datetime(self, input_data, node=None, input_name=''):
            return input_data

        def gds_format_datetime(self, input_data, input_name=''):
            print "CHUJ input_data CreDtm", type(input_data), input_data
            if input_data.microsecond == 0:
                _svalue = '%04d-%02d-%02dT%02d:%02d:%02d' % (
                    input_data.year,
                    input_data.month,
                    input_data.day,
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                )
            else:
                _svalue = '%04d-%02d-%02dT%02d:%02d:%02d.%s' % (
                    input_data.year,
                    input_data.month,
                    input_data.day,
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                    ('%f' % (float(input_data.microsecond) / 1000000))[2:],
                )
            if input_data.tzinfo is not None:
                tzoff = input_data.tzinfo.utcoffset(input_data)
                if tzoff is not None:
                    total_seconds = tzoff.seconds + (86400 * tzoff.days)
                    if total_seconds == 0:
                        _svalue += 'Z'
                    else:
                        if total_seconds < 0:
                            _svalue += '-'
                            total_seconds *= -1
                        else:
                            _svalue += '+'
                        hours = total_seconds // 3600
                        minutes = (total_seconds - (hours * 3600)) // 60
                        _svalue += '{0:02d}:{1:02d}'.format(hours, minutes)
            return _svalue

        @classmethod
        def gds_parse_datetime(cls, input_data):
            tz = None
            if input_data[-1] == 'Z':
                tz = GeneratedsSuper._FixedOffsetTZ(0, 'UTC')
                input_data = input_data[:-1]
            else:
                results = GeneratedsSuper.tzoff_pattern.search(input_data)
                if results is not None:
                    tzoff_parts = results.group(2).split(':')
                    tzoff = int(tzoff_parts[0]) * 60 + int(tzoff_parts[1])
                    if results.group(1) == '-':
                        tzoff *= -1
                    tz = GeneratedsSuper._FixedOffsetTZ(
                        tzoff, results.group(0))
                    input_data = input_data[:-6]
            time_parts = input_data.split('.')
            if len(time_parts) > 1:
                micro_seconds = int(float('0.' + time_parts[1]) * 1000000)
                input_data = '%s.%s' % (time_parts[0], micro_seconds,)
                dt = datetime_.datetime.strptime(
                    input_data, '%Y-%m-%dT%H:%M:%S.%f')
            else:
                dt = datetime_.datetime.strptime(
                    input_data, '%Y-%m-%dT%H:%M:%S')
            dt = dt.replace(tzinfo=tz)
            return dt

        def gds_validate_date(self, input_data, node=None, input_name=''):
            return input_data

        def gds_format_date(self, input_data, input_name=''):
            _svalue = '%04d-%02d-%02d' % (
                input_data.year,
                input_data.month,
                input_data.day,
            )
            try:
                if input_data.tzinfo is not None:
                    tzoff = input_data.tzinfo.utcoffset(input_data)
                    if tzoff is not None:
                        total_seconds = tzoff.seconds + (86400 * tzoff.days)
                        if total_seconds == 0:
                            _svalue += 'Z'
                        else:
                            if total_seconds < 0:
                                _svalue += '-'
                                total_seconds *= -1
                            else:
                                _svalue += '+'
                            hours = total_seconds // 3600
                            minutes = (total_seconds - (hours * 3600)) // 60
                            _svalue += '{0:02d}:{1:02d}'.format(
                                hours, minutes)
            except AttributeError:
                pass
            return _svalue

        @classmethod
        def gds_parse_date(cls, input_data):
            tz = None
            if input_data[-1] == 'Z':
                tz = GeneratedsSuper._FixedOffsetTZ(0, 'UTC')
                input_data = input_data[:-1]
            else:
                results = GeneratedsSuper.tzoff_pattern.search(input_data)
                if results is not None:
                    tzoff_parts = results.group(2).split(':')
                    tzoff = int(tzoff_parts[0]) * 60 + int(tzoff_parts[1])
                    if results.group(1) == '-':
                        tzoff *= -1
                    tz = GeneratedsSuper._FixedOffsetTZ(
                        tzoff, results.group(0))
                    input_data = input_data[:-6]
            dt = datetime_.datetime.strptime(input_data, '%Y-%m-%d')
            dt = dt.replace(tzinfo=tz)
            return dt.date()

        def gds_validate_time(self, input_data, node=None, input_name=''):
            return input_data

        def gds_format_time(self, input_data, input_name=''):
            if input_data.microsecond == 0:
                _svalue = '%02d:%02d:%02d' % (
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                )
            else:
                _svalue = '%02d:%02d:%02d.%s' % (
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                    ('%f' % (float(input_data.microsecond) / 1000000))[2:],
                )
            if input_data.tzinfo is not None:
                tzoff = input_data.tzinfo.utcoffset(input_data)
                if tzoff is not None:
                    total_seconds = tzoff.seconds + (86400 * tzoff.days)
                    if total_seconds == 0:
                        _svalue += 'Z'
                    else:
                        if total_seconds < 0:
                            _svalue += '-'
                            total_seconds *= -1
                        else:
                            _svalue += '+'
                        hours = total_seconds // 3600
                        minutes = (total_seconds - (hours * 3600)) // 60
                        _svalue += '{0:02d}:{1:02d}'.format(hours, minutes)
            return _svalue

        def gds_validate_simple_patterns(self, patterns, target):
            # pat is a list of lists of strings/patterns.  We should:
            # - AND the outer elements
            # - OR the inner elements
            found1 = True
            for patterns1 in patterns:
                found2 = False
                for patterns2 in patterns1:
                    if re_.search(patterns2, target) is not None:
                        found2 = True
                        break
                if not found2:
                    found1 = False
                    break
            return found1

        @classmethod
        def gds_parse_time(cls, input_data):
            tz = None
            if input_data[-1] == 'Z':
                tz = GeneratedsSuper._FixedOffsetTZ(0, 'UTC')
                input_data = input_data[:-1]
            else:
                results = GeneratedsSuper.tzoff_pattern.search(input_data)
                if results is not None:
                    tzoff_parts = results.group(2).split(':')
                    tzoff = int(tzoff_parts[0]) * 60 + int(tzoff_parts[1])
                    if results.group(1) == '-':
                        tzoff *= -1
                    tz = GeneratedsSuper._FixedOffsetTZ(
                        tzoff, results.group(0))
                    input_data = input_data[:-6]
            if len(input_data.split('.')) > 1:
                dt = datetime_.datetime.strptime(input_data, '%H:%M:%S.%f')
            else:
                dt = datetime_.datetime.strptime(input_data, '%H:%M:%S')
            dt = dt.replace(tzinfo=tz)
            return dt.time()

        def gds_str_lower(self, instring):
            return instring.lower()

        def get_path_(self, node):
            path_list = []
            self.get_path_list_(node, path_list)
            path_list.reverse()
            path = '/'.join(path_list)
            return path

        Tag_strip_pattern_ = re_.compile(r'\{.*\}')

        def get_path_list_(self, node, path_list):
            if node is None:
                return
            tag = GeneratedsSuper.Tag_strip_pattern_.sub('', node.tag)
            if tag:
                path_list.append(tag)
            self.get_path_list_(node.getparent(), path_list)

        def get_class_obj_(self, node, default_class=None):
            class_obj1 = default_class
            if 'xsi' in node.nsmap:
                classname = node.get('{%s}type' % node.nsmap['xsi'])
                if classname is not None:
                    names = classname.split(':')
                    if len(names) == 2:
                        classname = names[1]
                    class_obj2 = globals().get(classname)
                    if class_obj2 is not None:
                        class_obj1 = class_obj2
            return class_obj1

        def gds_build_any(self, node, type_name=None):
            return None

        @classmethod
        def gds_reverse_node_mapping(cls, mapping):
            return dict(((v, k) for k, v in mapping.iteritems()))

        @staticmethod
        def gds_encode(instring):
            if sys.version_info.major == 2:
                return instring.encode(ExternalEncoding)
            else:
                return instring


    def getSubclassFromModule_(module, class_):
        '''Get the subclass of a class from a specific module.'''
        name = class_.__name__ + 'Sub'
        if hasattr(module, name):
            return getattr(module, name)
        else:
            return None

#
# If you have installed IPython you can uncomment and use the following.
# IPython is available from http://ipython.scipy.org/.
#

## from IPython.Shell import IPShellEmbed
## args = ''
## ipshell = IPShellEmbed(args,
##     banner = 'Dropping into IPython',
##     exit_msg = 'Leaving Interpreter, back to program.')

# Then use the following line where and when you want to drop into the
# IPython shell:
#    ipshell('<some message> -- Entering ipshell.\nHit Ctrl-D to exit')

#
# Globals
#

ExternalEncoding = 'ascii'
Tag_pattern_ = re_.compile(r'({.*})?(.*)')
String_cleanup_pat_ = re_.compile(r"[\n\r\s]+")
Namespace_extract_pat_ = re_.compile(r'{(.*)}(.*)')
CDATA_pattern_ = re_.compile(r"<!\[CDATA\[.*?\]\]>", re_.DOTALL)

# Change this to redirect the generated superclass module to use a
# specific subclass module.
CurrentSubclassModule_ = None


#
# Support/utility functions.
#


def showIndent(outfile, level, pretty_print=True):
    if pretty_print:
        for idx in range(level):
            outfile.write('    ')


def quote_xml(inStr):
    "Escape markup chars, but do not modify CDATA sections."
    if not inStr:
        return ''
    s1 = (isinstance(inStr, BaseStrType_) and inStr or '%s' % inStr)
    s2 = ''
    pos = 0
    matchobjects = CDATA_pattern_.finditer(s1)
    for mo in matchobjects:
        s3 = s1[pos:mo.start()]
        s2 += quote_xml_aux(s3)
        s2 += s1[mo.start():mo.end()]
        pos = mo.end()
    s3 = s1[pos:]
    s2 += quote_xml_aux(s3)
    return s2


def quote_xml_aux(inStr):
    s1 = inStr.replace('&', '&amp;')
    s1 = s1.replace('<', '&lt;')
    s1 = s1.replace('>', '&gt;')
    return s1


def quote_attrib(inStr):
    s1 = (isinstance(inStr, BaseStrType_) and inStr or '%s' % inStr)
    s1 = s1.replace('&', '&amp;')
    s1 = s1.replace('<', '&lt;')
    s1 = s1.replace('>', '&gt;')
    if '"' in s1:
        if "'" in s1:
            s1 = '"%s"' % s1.replace('"', "&quot;")
        else:
            s1 = "'%s'" % s1
    else:
        s1 = '"%s"' % s1
    return s1


def quote_python(inStr):
    s1 = inStr
    if s1.find("'") == -1:
        if s1.find('\n') == -1:
            return "'%s'" % s1
        else:
            return "'''%s'''" % s1
    else:
        if s1.find('"') != -1:
            s1 = s1.replace('"', '\\"')
        if s1.find('\n') == -1:
            return '"%s"' % s1
        else:
            return '"""%s"""' % s1


def get_all_text_(node):
    if node.text is not None:
        text = node.text
    else:
        text = ''
    for child in node:
        if child.tail is not None:
            text += child.tail
    return text


def find_attr_value_(attr_name, node):
    attrs = node.attrib
    attr_parts = attr_name.split(':')
    value = None
    if len(attr_parts) == 1:
        value = attrs.get(attr_name)
    elif len(attr_parts) == 2:
        prefix, name = attr_parts
        namespace = node.nsmap.get(prefix)
        if namespace is not None:
            value = attrs.get('{%s}%s' % (namespace, name,))
    return value


class GDSParseError(Exception):
    pass


def raise_parse_error(node, msg):
    msg = '%s (element %s/line %d)' % (msg, node.tag, node.sourceline,)
    raise GDSParseError(msg)


class MixedContainer:
    # Constants for category:
    CategoryNone = 0
    CategoryText = 1
    CategorySimple = 2
    CategoryComplex = 3
    # Constants for content_type:
    TypeNone = 0
    TypeText = 1
    TypeString = 2
    TypeInteger = 3
    TypeFloat = 4
    TypeDecimal = 5
    TypeDouble = 6
    TypeBoolean = 7
    TypeBase64 = 8

    def __init__(self, category, content_type, name, value):
        self.category = category
        self.content_type = content_type
        self.name = name
        self.value = value

    def getCategory(self):
        return self.category

    def getContenttype(self, content_type):
        return self.content_type

    def getValue(self):
        return self.value

    def getName(self):
        return self.name

    def export(self, outfile, level, name, namespace, pretty_print=True):
        if self.category == MixedContainer.CategoryText:
            # Prevent exporting empty content as empty lines.
            if self.value.strip():
                outfile.write(self.value)
        elif self.category == MixedContainer.CategorySimple:
            self.exportSimple(outfile, level, name)
        else:  # category == MixedContainer.CategoryComplex
            self.value.export(outfile, level, namespace, name, pretty_print)

    def exportSimple(self, outfile, level, name):
        if self.content_type == MixedContainer.TypeString:
            outfile.write('<%s>%s</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeInteger or \
                        self.content_type == MixedContainer.TypeBoolean:
            outfile.write('<%s>%d</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeFloat or \
                        self.content_type == MixedContainer.TypeDecimal:
            outfile.write('<%s>%f</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeDouble:
            outfile.write('<%s>%g</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeBase64:
            outfile.write('<%s>%s</%s>' % (
                self.name, base64.b64encode(self.value), self.name))

    def to_etree(self, element):
        if self.category == MixedContainer.CategoryText:
            # Prevent exporting empty content as empty lines.
            if self.value.strip():
                if len(element) > 0:
                    if element[-1].tail is None:
                        element[-1].tail = self.value
                    else:
                        element[-1].tail += self.value
                else:
                    if element.text is None:
                        element.text = self.value
                    else:
                        element.text += self.value
        elif self.category == MixedContainer.CategorySimple:
            subelement = etree_.SubElement(element, '%s' % self.name)
            subelement.text = self.to_etree_simple()
        else:  # category == MixedContainer.CategoryComplex
            self.value.to_etree(element)

    def to_etree_simple(self):
        if self.content_type == MixedContainer.TypeString:
            text = self.value
        elif (self.content_type == MixedContainer.TypeInteger or
                      self.content_type == MixedContainer.TypeBoolean):
            text = '%d' % self.value
        elif (self.content_type == MixedContainer.TypeFloat or
                      self.content_type == MixedContainer.TypeDecimal):
            text = '%f' % self.value
        elif self.content_type == MixedContainer.TypeDouble:
            text = '%g' % self.value
        elif self.content_type == MixedContainer.TypeBase64:
            text = '%s' % base64.b64encode(self.value)
        return text

    def exportLiteral(self, outfile, level, name):
        if self.category == MixedContainer.CategoryText:
            showIndent(outfile, level)
            outfile.write(
                'model_.MixedContainer(%d, %d, "%s", "%s"),\n' % (
                    self.category, self.content_type, self.name, self.value))
        elif self.category == MixedContainer.CategorySimple:
            showIndent(outfile, level)
            outfile.write(
                'model_.MixedContainer(%d, %d, "%s", "%s"),\n' % (
                    self.category, self.content_type, self.name, self.value))
        else:  # category == MixedContainer.CategoryComplex
            showIndent(outfile, level)
            outfile.write(
                'model_.MixedContainer(%d, %d, "%s",\n' % (
                    self.category, self.content_type, self.name,))
            self.value.exportLiteral(outfile, level + 1)
            showIndent(outfile, level)
            outfile.write(')\n')


class MemberSpec_(object):
    def __init__(self, name='', data_type='', container=0):
        self.name = name
        self.data_type = data_type
        self.container = container

    def set_name(self, name):
        self.name = name

    def get_name(self):
        return self.name

    def set_data_type(self, data_type):
        self.data_type = data_type

    def get_data_type_chain(self):
        return self.data_type

    def get_data_type(self):
        if isinstance(self.data_type, list):
            if len(self.data_type) > 0:
                return self.data_type[-1]
            else:
                return 'xs:string'
        else:
            return self.data_type

    def set_container(self, container):
        self.container = container

    def get_container(self):
        return self.container


def _cast(typ, value):
    if typ is None or value is None:
        return value
    return typ(value)


#
# Data representation classes.
#


class Document(GeneratedsSuper):
    member_data_items_ = {
        'CstmrCdtTrfInitn': MemberSpec_('CstmrCdtTrfInitn', 'CustomerCreditTransferInitiationV03-CH', 0),
    }
    subclass = None
    superclass = None

    def __init__(self, CstmrCdtTrfInitn=None):
        self.original_tagname_ = None
        self.CstmrCdtTrfInitn = CstmrCdtTrfInitn

    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, Document)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if Document.subclass:
            return Document.subclass(*args_, **kwargs_)
        else:
            return Document(*args_, **kwargs_)

    factory = staticmethod(factory)

    def get_CstmrCdtTrfInitn(self):
        return self.CstmrCdtTrfInitn

    def set_CstmrCdtTrfInitn(self, CstmrCdtTrfInitn):
        self.CstmrCdtTrfInitn = CstmrCdtTrfInitn

    def hasContent_(self):
        if (
                    self.CstmrCdtTrfInitn is not None
        ):
            return True
        else:
            return False

    def export(self, outfile, level, namespace_='', name_='Document', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '',))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='Document')
        if self.hasContent_():
            outfile.write('>%s' % (eol_,))
            self.exportChildren(outfile, level + 1, namespace_='', name_='Document', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_,))

    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='Document'):
        pass

    def exportChildren(self, outfile, level, namespace_='', name_='Document', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.CstmrCdtTrfInitn is not None:
            self.CstmrCdtTrfInitn.export(outfile, level, namespace_, name_='CstmrCdtTrfInitn',
                                         pretty_print=pretty_print)

    def to_etree(self, parent_element=None, name_='Document', mapping_=None):
        if parent_element is None:
            element = etree_.Element('{http://www.six-interbank-clearing.com/de/pain.001.001.03.ch.02.xsd}' + name_)
        else:
            element = etree_.SubElement(parent_element,
                                        '{http://www.six-interbank-clearing.com/de/pain.001.001.03.ch.02.xsd}' + name_)
        if self.CstmrCdtTrfInitn is not None:
            CstmrCdtTrfInitn_ = self.CstmrCdtTrfInitn
            CstmrCdtTrfInitn_.to_etree(element, name_='CstmrCdtTrfInitn', mapping_=mapping_)
        if mapping_ is not None:
            mapping_[self] = element
        return element

    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self

    def buildAttributes(self, node, attrs, already_processed):
        pass

    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'CstmrCdtTrfInitn':
            obj_ = CustomerCreditTransferInitiationV03_CH.factory()
            obj_.build(child_)
            self.CstmrCdtTrfInitn = obj_
            obj_.original_tagname_ = 'CstmrCdtTrfInitn'


# end class Document


class CustomerCreditTransferInitiationV03_CH(GeneratedsSuper):
    member_data_items_ = {
        'GrpHdr': MemberSpec_('GrpHdr', 'GroupHeader32-CH', 0),
        'PmtInf': MemberSpec_('PmtInf', 'PaymentInstructionInformation3-CH', 1),
    }
    subclass = None
    superclass = None

    def __init__(self, GrpHdr=None, PmtInf=None):
        self.original_tagname_ = None
        self.GrpHdr = GrpHdr
        if PmtInf is None:
            self.PmtInf = []
        else:
            self.PmtInf = PmtInf

    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, CustomerCreditTransferInitiationV03_CH)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if CustomerCreditTransferInitiationV03_CH.subclass:
            return CustomerCreditTransferInitiationV03_CH.subclass(*args_, **kwargs_)
        else:
            return CustomerCreditTransferInitiationV03_CH(*args_, **kwargs_)

    factory = staticmethod(factory)

    def get_GrpHdr(self):
        return self.GrpHdr

    def set_GrpHdr(self, GrpHdr):
        self.GrpHdr = GrpHdr

    def get_PmtInf(self):
        return self.PmtInf

    def set_PmtInf(self, PmtInf):
        self.PmtInf = PmtInf

    def add_PmtInf(self, value):
        self.PmtInf.append(value)

    def insert_PmtInf_at(self, index, value):
        self.PmtInf.insert(index, value)

    def replace_PmtInf_at(self, index, value):
        self.PmtInf[index] = value

    def hasContent_(self):
        if (
                        self.GrpHdr is not None or
                    self.PmtInf
        ):
            return True
        else:
            return False

    def export(self, outfile, level, namespace_='', name_='CustomerCreditTransferInitiationV03-CH', namespacedef_='',
               pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '',))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_,
                              name_='CustomerCreditTransferInitiationV03-CH')
        if self.hasContent_():
            outfile.write('>%s' % (eol_,))
            self.exportChildren(outfile, level + 1, namespace_='', name_='CustomerCreditTransferInitiationV03-CH',
                                pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_,))

    def exportAttributes(self, outfile, level, already_processed, namespace_='',
                         name_='CustomerCreditTransferInitiationV03-CH'):
        pass

    def exportChildren(self, outfile, level, namespace_='', name_='CustomerCreditTransferInitiationV03-CH',
                       fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.GrpHdr is not None:
            self.GrpHdr.export(outfile, level, namespace_, name_='GrpHdr', pretty_print=pretty_print)
        for PmtInf_ in self.PmtInf:
            PmtInf_.export(outfile, level, namespace_, name_='PmtInf', pretty_print=pretty_print)

    def to_etree(self, parent_element=None, name_='CustomerCreditTransferInitiationV03-CH', mapping_=None):
        if parent_element is None:
            element = etree_.Element('{http://www.six-interbank-clearing.com/de/pain.001.001.03.ch.02.xsd}' + name_)
        else:
            element = etree_.SubElement(parent_element,
                                        '{http://www.six-interbank-clearing.com/de/pain.001.001.03.ch.02.xsd}' + name_)
        if self.GrpHdr is not None:
            GrpHdr_ = self.GrpHdr
            GrpHdr_.to_etree(element, name_='GrpHdr', mapping_=mapping_)
        for PmtInf_ in self.PmtInf:
            PmtInf_.to_etree(element, name_='PmtInf', mapping_=mapping_)
        if mapping_ is not None:
            mapping_[self] = element
        return element

    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self

    def buildAttributes(self, node, attrs, already_processed):
        pass

    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'GrpHdr':
            obj_ = GroupHeader32_CH.factory()
            obj_.build(child_)
            self.GrpHdr = obj_
            obj_.original_tagname_ = 'GrpHdr'
        elif nodeName_ == 'PmtInf':
            obj_ = PaymentInstructionInformation3_CH.factory()
            obj_.build(child_)
            self.PmtInf.append(obj_)
            obj_.original_tagname_ = 'PmtInf'


# end class CustomerCreditTransferInitiationV03_CH


class PaymentInstructionInformation3_CH(GeneratedsSuper):
    member_data_items_ = {
        'PmtInfId': MemberSpec_('PmtInfId', ['Max35TextSwift', 'BasicText-Swift'], 0),
        'PmtMtd': MemberSpec_('PmtMtd', ['Max70Text', 'BasicText-CH'], 0),
        'BtchBookg': MemberSpec_('BtchBookg', ['Max70Text', 'BasicText-CH'], 0),
        'NbOfTxs': MemberSpec_('NbOfTxs', ['Max15NumericText', 'xs:string'], 0),
        'CtrlSum': MemberSpec_('CtrlSum', ['DecimalNumber', 'xs:decimal'], 0),
        'PmtTpInf': MemberSpec_('PmtTpInf', ['Max70Text', 'BasicText-CH'], 0),
        'ReqdExctnDt': MemberSpec_('ReqdExctnDt', ['ISODate', 'xs:date'], 0),
        'Dbtr': MemberSpec_('Dbtr', ['Max70Text', 'BasicText-CH'], 0),
        'DbtrAcct': MemberSpec_('DbtrAcct', ['Max70Text', 'BasicText-CH'], 0),
        'DbtrAgt': MemberSpec_('DbtrAgt', ['Max70Text', 'BasicText-CH'], 0),
        'UltmtDbtr': MemberSpec_('UltmtDbtr', ['Max70Text', 'BasicText-CH'], 0),
        'ChrgBr': MemberSpec_('ChrgBr', ['Max70Text', 'BasicText-CH'], 0),
        'ChrgsAcct': MemberSpec_('ChrgsAcct', ['Max70Text', 'BasicText-CH'], 0),
        'CdtTrfTxInf': MemberSpec_('CdtTrfTxInf', ['Max70Text', 'BasicText-CH'], 1),
    }
    subclass = None
    superclass = None

    def __init__(self, PmtInfId=None, PmtMtd=None, BtchBookg=None, NbOfTxs=None, CtrlSum=None, PmtTpInf=None,
                 ReqdExctnDt=None, Dbtr=None, DbtrAcct=None, DbtrAgt=None, UltmtDbtr=None, ChrgBr=None, ChrgsAcct=None,
                 CdtTrfTxInf=None):
        self.original_tagname_ = None
        self.PmtInfId = PmtInfId
        self.validate_Max35TextSwift(self.PmtInfId)
        self.PmtMtd = PmtMtd
        self.validate_Max70Text(self.PmtMtd)
        self.BtchBookg = BtchBookg
        self.validate_Max70Text(self.BtchBookg)
        self.NbOfTxs = NbOfTxs
        self.validate_Max15NumericText(self.NbOfTxs)
        self.CtrlSum = CtrlSum
        self.validate_DecimalNumber(self.CtrlSum)
        self.PmtTpInf = PmtTpInf
        self.validate_Max70Text(self.PmtTpInf)
        if isinstance(ReqdExctnDt, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(ReqdExctnDt, '%Y-%m-%d').date()
        else:
            initvalue_ = ReqdExctnDt
        self.ReqdExctnDt = initvalue_
        self.Dbtr = Dbtr
        self.validate_Max70Text(self.Dbtr)
        self.DbtrAcct = DbtrAcct
        self.validate_Max70Text(self.DbtrAcct)
        self.DbtrAgt = DbtrAgt
        self.validate_Max70Text(self.DbtrAgt)
        self.UltmtDbtr = UltmtDbtr
        self.validate_Max70Text(self.UltmtDbtr)
        self.ChrgBr = ChrgBr
        self.validate_Max70Text(self.ChrgBr)
        self.ChrgsAcct = ChrgsAcct
        self.validate_Max70Text(self.ChrgsAcct)
        if CdtTrfTxInf is None:
            self.CdtTrfTxInf = []
        else:
            self.CdtTrfTxInf = CdtTrfTxInf

    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, PaymentInstructionInformation3_CH)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if PaymentInstructionInformation3_CH.subclass:
            return PaymentInstructionInformation3_CH.subclass(*args_, **kwargs_)
        else:
            return PaymentInstructionInformation3_CH(*args_, **kwargs_)

    factory = staticmethod(factory)

    def get_PmtInfId(self):
        return self.PmtInfId

    def set_PmtInfId(self, PmtInfId):
        self.PmtInfId = PmtInfId

    def get_PmtMtd(self):
        return self.PmtMtd

    def set_PmtMtd(self, PmtMtd):
        self.PmtMtd = PmtMtd

    def get_BtchBookg(self):
        return self.BtchBookg

    def set_BtchBookg(self, BtchBookg):
        self.BtchBookg = BtchBookg

    def get_NbOfTxs(self):
        return self.NbOfTxs

    def set_NbOfTxs(self, NbOfTxs):
        self.NbOfTxs = NbOfTxs

    def get_CtrlSum(self):
        return self.CtrlSum

    def set_CtrlSum(self, CtrlSum):
        self.CtrlSum = CtrlSum

    def get_PmtTpInf(self):
        return self.PmtTpInf

    def set_PmtTpInf(self, PmtTpInf):
        self.PmtTpInf = PmtTpInf

    def get_ReqdExctnDt(self):
        return self.ReqdExctnDt

    def set_ReqdExctnDt(self, ReqdExctnDt):
        self.ReqdExctnDt = ReqdExctnDt

    def get_Dbtr(self):
        return self.Dbtr

    def set_Dbtr(self, Dbtr):
        self.Dbtr = Dbtr

    def get_DbtrAcct(self):
        return self.DbtrAcct

    def set_DbtrAcct(self, DbtrAcct):
        self.DbtrAcct = DbtrAcct

    def get_DbtrAgt(self):
        return self.DbtrAgt

    def set_DbtrAgt(self, DbtrAgt):
        self.DbtrAgt = DbtrAgt

    def get_UltmtDbtr(self):
        return self.UltmtDbtr

    def set_UltmtDbtr(self, UltmtDbtr):
        self.UltmtDbtr = UltmtDbtr

    def get_ChrgBr(self):
        return self.ChrgBr

    def set_ChrgBr(self, ChrgBr):
        self.ChrgBr = ChrgBr

    def get_ChrgsAcct(self):
        return self.ChrgsAcct

    def set_ChrgsAcct(self, ChrgsAcct):
        self.ChrgsAcct = ChrgsAcct

    def get_CdtTrfTxInf(self):
        return self.CdtTrfTxInf

    def set_CdtTrfTxInf(self, CdtTrfTxInf):
        self.CdtTrfTxInf = CdtTrfTxInf

    def add_CdtTrfTxInf(self, value):
        self.CdtTrfTxInf.append(value)

    def insert_CdtTrfTxInf_at(self, index, value):
        self.CdtTrfTxInf.insert(index, value)

    def replace_CdtTrfTxInf_at(self, index, value):
        self.CdtTrfTxInf[index] = value

    def validate_Max35TextSwift(self, value):
        # Validate type Max35TextSwift, a restriction on BasicText-Swift.
        if value is not None and Validate_simpletypes_:
            if len(str(value)) > 35:
                warnings_.warn(
                    'Value "%(value)s" does not match xsd maxLength restriction on Max35TextSwift' % {"value": value})
            if len(str(value)) < 1:
                warnings_.warn(
                    'Value "%(value)s" does not match xsd minLength restriction on Max35TextSwift' % {"value": value})
            if not self.gds_validate_simple_patterns(
                    self.validate_Max35TextSwift_patterns_, value):
                warnings_.warn('Value "%s" does not match xsd pattern restrictions: %s' % (
                value.encode('utf-8'), self.validate_Max35TextSwift_patterns_,))

    validate_Max35TextSwift_patterns_ = [["^([A-Za-z0-9]|[+|\\?|/|\\-|:|\\(|\\)|\\.|,|'|\\p{Zs}])*$"]]

    def validate_Max70Text(self, value):
        # Validate type Max70Text, a restriction on BasicText-CH.
        if value is not None and Validate_simpletypes_:
            if len(str(value)) > 70:
                warnings_.warn(
                    'Value "%(value)s" does not match xsd maxLength restriction on Max70Text' % {"value": value})
            if len(str(value)) < 1:
                warnings_.warn(
                    'Value "%(value)s" does not match xsd minLength restriction on Max70Text' % {"value": value})
            if not self.gds_validate_simple_patterns(
                    self.validate_Max70Text_patterns_, value):
                warnings_.warn('Value "%s" does not match xsd pattern restrictions: %s' % (
                value.encode('utf-8'), self.validate_Max70Text_patterns_,))

    validate_Max70Text_patterns_ = [[
                                        u'^([a-zA-Z0-9\\.,;:\'\\+\\-/\\(\\)?\\*\\[\\]\\{\\}\\\\`\xb4~ ]|[!"#%&<>\xf7=@_$\xa3]|[\xe0\xe1\xe2\xe4\xe7\xe8\xe9\xea\xeb\xec\xed\xee\xef\xf1\xf2\xf3\xf4\xf6\xf9\xfa\xfb\xfc\xfd\xdf\xc0\xc1\xc2\xc4\xc7\xc8\xc9\xca\xcb\xcc\xcd\xce\xcf\xd2\xd3\xd4\xd6\xd9\xda\xdb\xdc\xd1])*$']]

    def validate_Max15NumericText(self, value):
        # Validate type Max15NumericText, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            if not self.gds_validate_simple_patterns(
                    self.validate_Max15NumericText_patterns_, value):
                warnings_.warn('Value "%s" does not match xsd pattern restrictions: %s' % (
                value.encode('utf-8'), self.validate_Max15NumericText_patterns_,))

    validate_Max15NumericText_patterns_ = [['^[0-9]{1,15}$']]

    def validate_DecimalNumber(self, value):
        # Validate type DecimalNumber, a restriction on xs:decimal.
        if value is not None and Validate_simpletypes_:
            if len(str(value)) >= 18:
                warnings_.warn(
                    'Value "%(value)s" does not match xsd maxInclusive restriction on DecimalNumber' % {"value": value})

    def validate_ISODate(self, value):
        # Validate type ISODate, a restriction on xs:date.
        if value is not None and Validate_simpletypes_:
            pass

    def hasContent_(self):
        if (
                                                                        self.PmtInfId is not None or
                                                                        self.PmtMtd is not None or
                                                                    self.BtchBookg is not None or
                                                                self.NbOfTxs is not None or
                                                            self.CtrlSum is not None or
                                                        self.PmtTpInf is not None or
                                                    self.ReqdExctnDt is not None or
                                                self.Dbtr is not None or
                                            self.DbtrAcct is not None or
                                        self.DbtrAgt is not None or
                                    self.UltmtDbtr is not None or
                                self.ChrgBr is not None or
                            self.ChrgsAcct is not None or
                    self.CdtTrfTxInf
        ):
            return True
        else:
            return False

    def export(self, outfile, level, namespace_='', name_='PaymentInstructionInformation3-CH', namespacedef_='',
               pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '',))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='PaymentInstructionInformation3-CH')
        if self.hasContent_():
            outfile.write('>%s' % (eol_,))
            self.exportChildren(outfile, level + 1, namespace_='', name_='PaymentInstructionInformation3-CH',
                                pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_,))

    def exportAttributes(self, outfile, level, already_processed, namespace_='',
                         name_='PaymentInstructionInformation3-CH'):
        pass

    def exportChildren(self, outfile, level, namespace_='', name_='PaymentInstructionInformation3-CH',
                       fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.PmtInfId is not None:
            self.PmtInfId.export(outfile, level, namespace_, name_='PmtInfId', pretty_print=pretty_print)
        if self.PmtMtd is not None:
            self.PmtMtd.export(outfile, level, namespace_, name_='PmtMtd', pretty_print=pretty_print)
        if self.BtchBookg is not None:
            self.BtchBookg.export(outfile, level, namespace_, name_='BtchBookg', pretty_print=pretty_print)
        if self.NbOfTxs is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sNbOfTxs>%s</%sNbOfTxs>%s' % (
            namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.NbOfTxs), input_name='NbOfTxs')),
            namespace_, eol_))
        if self.CtrlSum is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCtrlSum>%s</%sCtrlSum>%s' % (
            namespace_, self.gds_format_float(self.CtrlSum, input_name='CtrlSum'), namespace_, eol_))
        if self.PmtTpInf is not None:
            self.PmtTpInf.export(outfile, level, namespace_, name_='PmtTpInf', pretty_print=pretty_print)
        if self.ReqdExctnDt is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sReqdExctnDt>%s</%sReqdExctnDt>%s' % (
            namespace_, self.gds_format_date(self.ReqdExctnDt, input_name='ReqdExctnDt'), namespace_, eol_))
        if self.Dbtr is not None:
            self.Dbtr.export(outfile, level, namespace_, name_='Dbtr', pretty_print=pretty_print)
        if self.DbtrAcct is not None:
            self.DbtrAcct.export(outfile, level, namespace_, name_='DbtrAcct', pretty_print=pretty_print)
        if self.DbtrAgt is not None:
            self.DbtrAgt.export(outfile, level, namespace_, name_='DbtrAgt', pretty_print=pretty_print)
        if self.UltmtDbtr is not None:
            self.UltmtDbtr.export(outfile, level, namespace_, name_='UltmtDbtr', pretty_print=pretty_print)
        if self.ChrgBr is not None:
            self.ChrgBr.export(outfile, level, namespace_, name_='ChrgBr', pretty_print=pretty_print)
        if self.ChrgsAcct is not None:
            self.ChrgsAcct.export(outfile, level, namespace_, name_='ChrgsAcct', pretty_print=pretty_print)
        for CdtTrfTxInf_ in self.CdtTrfTxInf:
            CdtTrfTxInf_.export(outfile, level, namespace_, name_='CdtTrfTxInf', pretty_print=pretty_print)

    def to_etree(self, parent_element=None, name_='PaymentInstructionInformation3-CH', mapping_=None):
        if parent_element is None:
            element = etree_.Element('{http://www.six-interbank-clearing.com/de/pain.001.001.03.ch.02.xsd}' + name_)
        else:
            element = etree_.SubElement(parent_element,
                                        '{http://www.six-interbank-clearing.com/de/pain.001.001.03.ch.02.xsd}' + name_)
        if self.PmtInfId is not None:
            PmtInfId_ = self.PmtInfId
            PmtInfId_.to_etree(element, name_='PmtInfId', mapping_=mapping_)
        if self.PmtMtd is not None:
            PmtMtd_ = self.PmtMtd
            PmtMtd_.to_etree(element, name_='PmtMtd', mapping_=mapping_)
        if self.BtchBookg is not None:
            BtchBookg_ = self.BtchBookg
            BtchBookg_.to_etree(element, name_='BtchBookg', mapping_=mapping_)
        if self.NbOfTxs is not None:
            NbOfTxs_ = self.NbOfTxs
            etree_.SubElement(element,
                              '{http://www.six-interbank-clearing.com/de/pain.001.001.03.ch.02.xsd}NbOfTxs').text = self.gds_format_string(
                NbOfTxs_)
        if self.CtrlSum is not None:
            CtrlSum_ = self.CtrlSum
            etree_.SubElement(element,
                              '{http://www.six-interbank-clearing.com/de/pain.001.001.03.ch.02.xsd}CtrlSum').text = self.gds_format_float(
                CtrlSum_)
        if self.PmtTpInf is not None:
            PmtTpInf_ = self.PmtTpInf
            PmtTpInf_.to_etree(element, name_='PmtTpInf', mapping_=mapping_)
        if self.ReqdExctnDt is not None:
            ReqdExctnDt_ = self.ReqdExctnDt
            etree_.SubElement(element,
                              '{http://www.six-interbank-clearing.com/de/pain.001.001.03.ch.02.xsd}ReqdExctnDt').text = self.gds_format_date(
                ReqdExctnDt_)
        if self.Dbtr is not None:
            Dbtr_ = self.Dbtr
            Dbtr_.to_etree(element, name_='Dbtr', mapping_=mapping_)
        if self.DbtrAcct is not None:
            DbtrAcct_ = self.DbtrAcct
            DbtrAcct_.to_etree(element, name_='DbtrAcct', mapping_=mapping_)
        if self.DbtrAgt is not None:
            DbtrAgt_ = self.DbtrAgt
            DbtrAgt_.to_etree(element, name_='DbtrAgt', mapping_=mapping_)
        if self.UltmtDbtr is not None:
            UltmtDbtr_ = self.UltmtDbtr
            UltmtDbtr_.to_etree(element, name_='UltmtDbtr', mapping_=mapping_)
        if self.ChrgBr is not None:
            ChrgBr_ = self.ChrgBr
            ChrgBr_.to_etree(element, name_='ChrgBr', mapping_=mapping_)
        if self.ChrgsAcct is not None:
            ChrgsAcct_ = self.ChrgsAcct
            ChrgsAcct_.to_etree(element, name_='ChrgsAcct', mapping_=mapping_)
        for CdtTrfTxInf_ in self.CdtTrfTxInf:
            CdtTrfTxInf_.to_etree(element, name_='CdtTrfTxInf', mapping_=mapping_)
        if mapping_ is not None:
            mapping_[self] = element
        return element

    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self

    def buildAttributes(self, node, attrs, already_processed):
        pass

    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'PmtInfId':
            obj_ = None
            self.PmtInfId = obj_
            obj_.original_tagname_ = 'PmtInfId'
            # validate type Max35TextSwift
            self.validate_Max35TextSwift(self.PmtInfId)
        elif nodeName_ == 'PmtMtd':
            obj_ = None
            self.PmtMtd = obj_
            obj_.original_tagname_ = 'PmtMtd'
            # validate type Max70Text
            self.validate_Max70Text(self.PmtMtd)
        elif nodeName_ == 'BtchBookg':
            obj_ = None
            self.BtchBookg = obj_
            obj_.original_tagname_ = 'BtchBookg'
            # validate type Max70Text
            self.validate_Max70Text(self.BtchBookg)
        elif nodeName_ == 'NbOfTxs':
            NbOfTxs_ = child_.text
            NbOfTxs_ = self.gds_validate_string(NbOfTxs_, node, 'NbOfTxs')
            self.NbOfTxs = NbOfTxs_
            # validate type Max15NumericText
            self.validate_Max15NumericText(self.NbOfTxs)
        elif nodeName_ == 'CtrlSum':
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'CtrlSum')
            self.CtrlSum = fval_
            # validate type DecimalNumber
            self.validate_DecimalNumber(self.CtrlSum)
        elif nodeName_ == 'PmtTpInf':
            obj_ = None
            self.PmtTpInf = obj_
            obj_.original_tagname_ = 'PmtTpInf'
            # validate type Max70Text
            self.validate_Max70Text(self.PmtTpInf)
        elif nodeName_ == 'ReqdExctnDt':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.ReqdExctnDt = dval_
            # validate type ISODate
            self.validate_ISODate(self.ReqdExctnDt)
        elif nodeName_ == 'Dbtr':
            obj_ = None
            self.Dbtr = obj_
            obj_.original_tagname_ = 'Dbtr'
            # validate type Max70Text
            self.validate_Max70Text(self.Dbtr)
        elif nodeName_ == 'DbtrAcct':
            obj_ = None
            self.DbtrAcct = obj_
            obj_.original_tagname_ = 'DbtrAcct'
            # validate type Max70Text
            self.validate_Max70Text(self.DbtrAcct)
        elif nodeName_ == 'DbtrAgt':
            obj_ = None
            self.DbtrAgt = obj_
            obj_.original_tagname_ = 'DbtrAgt'
            # validate type Max70Text
            self.validate_Max70Text(self.DbtrAgt)
        elif nodeName_ == 'UltmtDbtr':
            obj_ = None
            self.UltmtDbtr = obj_
            obj_.original_tagname_ = 'UltmtDbtr'
            # validate type Max70Text
            self.validate_Max70Text(self.UltmtDbtr)
        elif nodeName_ == 'ChrgBr':
            obj_ = None
            self.ChrgBr = obj_
            obj_.original_tagname_ = 'ChrgBr'
            # validate type Max70Text
            self.validate_Max70Text(self.ChrgBr)
        elif nodeName_ == 'ChrgsAcct':
            obj_ = None
            self.ChrgsAcct = obj_
            obj_.original_tagname_ = 'ChrgsAcct'
            # validate type Max70Text
            self.validate_Max70Text(self.ChrgsAcct)
        elif nodeName_ == 'CdtTrfTxInf':
            obj_ = None
            self.CdtTrfTxInf.append(obj_)
            obj_.original_tagname_ = 'CdtTrfTxInf'
            # validate type Max70Text
            self.validate_Max70Text(self.CdtTrfTxInf[-1])


# end class PaymentInstructionInformation3_CH


class GroupHeader32_CH(GeneratedsSuper):
    member_data_items_ = {
        'MsgId': MemberSpec_('MsgId', ['Max35TextSwift', 'BasicText-Swift'], 0),
        'CreDtTm': MemberSpec_('CreDtTm', ['ISODateTime', 'xs:dateTime'], 0),
        'NbOfTxs': MemberSpec_('NbOfTxs', ['Max15NumericText', 'xs:string'], 0),
        'CtrlSum': MemberSpec_('CtrlSum', ['DecimalNumber', 'xs:decimal'], 0),
        'InitgPty': MemberSpec_('InitgPty', 'PartyIdentification32-CH_NameAndId', 0),
        'FwdgAgt': MemberSpec_('FwdgAgt', ['Max70Text', 'BasicText-CH'], 0),
    }
    subclass = None
    superclass = None

    def __init__(self, MsgId=None, CreDtTm=None, NbOfTxs=None, CtrlSum=None, InitgPty=None, FwdgAgt=None):
        self.original_tagname_ = None
        self.MsgId = MsgId
        print "XXX init_MsgId:", type(self.MsgId), self.MsgId
        self.validate_Max35TextSwift(self.MsgId)
        if isinstance(CreDtTm, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(CreDtTm, '%Y-%m-%dT%H:%M:%S')
        else:
            initvalue_ = CreDtTm
        self.CreDtTm = initvalue_
        self.NbOfTxs = NbOfTxs
        self.validate_Max15NumericText(self.NbOfTxs)
        self.CtrlSum = CtrlSum
        self.validate_DecimalNumber(self.CtrlSum)
        self.InitgPty = InitgPty
        self.FwdgAgt = FwdgAgt
        self.validate_Max70Text(self.FwdgAgt)

    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, GroupHeader32_CH)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if GroupHeader32_CH.subclass:
            return GroupHeader32_CH.subclass(*args_, **kwargs_)
        else:
            return GroupHeader32_CH(*args_, **kwargs_)

    factory = staticmethod(factory)

    def get_MsgId(self):
        return self.MsgId

    def set_MsgId(self, MsgId):
        print "XXX set_MsgId:", type(self.MsgId), self.MsgId
        self.MsgId = MsgId

    def get_CreDtTm(self):
        return self.CreDtTm

    def set_CreDtTm(self, CreDtTm):
        self.CreDtTm = CreDtTm

    def get_NbOfTxs(self):
        return self.NbOfTxs

    def set_NbOfTxs(self, NbOfTxs):
        self.NbOfTxs = NbOfTxs

    def get_CtrlSum(self):
        return self.CtrlSum

    def set_CtrlSum(self, CtrlSum):
        self.CtrlSum = CtrlSum

    def get_InitgPty(self):
        return self.InitgPty

    def set_InitgPty(self, InitgPty):
        self.InitgPty = InitgPty

    def get_FwdgAgt(self):
        return self.FwdgAgt

    def set_FwdgAgt(self, FwdgAgt):
        self.FwdgAgt = FwdgAgt

    def validate_Max35TextSwift(self, value):
        # Validate type Max35TextSwift, a restriction on BasicText-Swift.
        if value is not None and Validate_simpletypes_:
            if len(str(value)) > 35:
                warnings_.warn(
                    'Value "%(value)s" does not match xsd maxLength restriction on Max35TextSwift' % {"value": value})
            if len(str(value)) < 1:
                warnings_.warn(
                    'Value "%(value)s" does not match xsd minLength restriction on Max35TextSwift' % {"value": value})
            if not self.gds_validate_simple_patterns(
                    self.validate_Max35TextSwift_patterns_, value):
                warnings_.warn('Value "%s" does not match xsd pattern restrictions: %s' % (
                value.encode('utf-8'), self.validate_Max35TextSwift_patterns_,))

    validate_Max35TextSwift_patterns_ = [["^([A-Za-z0-9]|[+|\\?|/|\\-|:|\\(|\\)|\\.|,|'|\\p{Zs}])*$"]]

    def validate_ISODateTime(self, value):
        # Validate type ISODateTime, a restriction on xs:dateTime.
        if value is not None and Validate_simpletypes_:
            pass

    def validate_Max15NumericText(self, value):
        # Validate type Max15NumericText, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            if not self.gds_validate_simple_patterns(
                    self.validate_Max15NumericText_patterns_, value):
                warnings_.warn('Value "%s" does not match xsd pattern restrictions: %s' % (
                value.encode('utf-8'), self.validate_Max15NumericText_patterns_,))

    validate_Max15NumericText_patterns_ = [['^[0-9]{1,15}$']]

    def validate_DecimalNumber(self, value):
        # Validate type DecimalNumber, a restriction on xs:decimal.
        if value is not None and Validate_simpletypes_:
            if len(str(value)) >= 18:
                warnings_.warn(
                    'Value "%(value)s" does not match xsd maxInclusive restriction on DecimalNumber' % {"value": value})

    def validate_Max70Text(self, value):
        # Validate type Max70Text, a restriction on BasicText-CH.
        if value is not None and Validate_simpletypes_:
            if len(str(value)) > 70:
                warnings_.warn(
                    'Value "%(value)s" does not match xsd maxLength restriction on Max70Text' % {"value": value})
            if len(str(value)) < 1:
                warnings_.warn(
                    'Value "%(value)s" does not match xsd minLength restriction on Max70Text' % {"value": value})
            if not self.gds_validate_simple_patterns(
                    self.validate_Max70Text_patterns_, value):
                warnings_.warn('Value "%s" does not match xsd pattern restrictions: %s' % (
                value.encode('utf-8'), self.validate_Max70Text_patterns_,))

    validate_Max70Text_patterns_ = [[
                                        u'^([a-zA-Z0-9\\.,;:\'\\+\\-/\\(\\)?\\*\\[\\]\\{\\}\\\\`\xb4~ ]|[!"#%&<>\xf7=@_$\xa3]|[\xe0\xe1\xe2\xe4\xe7\xe8\xe9\xea\xeb\xec\xed\xee\xef\xf1\xf2\xf3\xf4\xf6\xf9\xfa\xfb\xfc\xfd\xdf\xc0\xc1\xc2\xc4\xc7\xc8\xc9\xca\xcb\xcc\xcd\xce\xcf\xd2\xd3\xd4\xd6\xd9\xda\xdb\xdc\xd1])*$']]

    def hasContent_(self):
        if (
                                        self.MsgId is not None or
                                        self.CreDtTm is not None or
                                    self.NbOfTxs is not None or
                                self.CtrlSum is not None or
                            self.InitgPty is not None or
                        self.FwdgAgt is not None
        ):
            return True
        else:
            return False

    def export(self, outfile, level, namespace_='', name_='GroupHeader32-CH', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '',))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='GroupHeader32-CH')
        if self.hasContent_():
            outfile.write('>%s' % (eol_,))
            self.exportChildren(outfile, level + 1, namespace_='', name_='GroupHeader32-CH', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_,))

    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='GroupHeader32-CH'):
        pass

    def exportChildren(self, outfile, level, namespace_='', name_='GroupHeader32-CH', fromsubclass_=False,
                       pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.MsgId is not None:
            self.MsgId.export(outfile, level, namespace_, name_='MsgId', pretty_print=pretty_print)
        if self.CreDtTm is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCreDtTm>%s</%sCreDtTm>%s' % (
            namespace_, self.gds_format_datetime(self.CreDtTm, input_name='CreDtTm'), namespace_, eol_))
        if self.NbOfTxs is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sNbOfTxs>%s</%sNbOfTxs>%s' % (
            namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.NbOfTxs), input_name='NbOfTxs')),
            namespace_, eol_))
        if self.CtrlSum is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCtrlSum>%s</%sCtrlSum>%s' % (
            namespace_, self.gds_format_float(self.CtrlSum, input_name='CtrlSum'), namespace_, eol_))
        if self.InitgPty is not None:
            self.InitgPty.export(outfile, level, namespace_, name_='InitgPty', pretty_print=pretty_print)
        if self.FwdgAgt is not None:
            self.FwdgAgt.export(outfile, level, namespace_, name_='FwdgAgt', pretty_print=pretty_print)

    def to_etree(self, parent_element=None, name_='GroupHeader32-CH', mapping_=None):
        if parent_element is None:
            element = etree_.Element('{http://www.six-interbank-clearing.com/de/pain.001.001.03.ch.02.xsd}' + name_)
        else:
            element = etree_.SubElement(parent_element,
                                        '{http://www.six-interbank-clearing.com/de/pain.001.001.03.ch.02.xsd}' + name_)
        if self.MsgId is not None:
            MsgId_ = self.MsgId
            MsgId_.to_etree(element, name_='MsgId', mapping_=mapping_)
        if self.CreDtTm is not None:
            CreDtTm_ = self.CreDtTm
            etree_.SubElement(element,
                              '{http://www.six-interbank-clearing.com/de/pain.001.001.03.ch.02.xsd}CreDtTm').text = self.gds_format_datetime(
                CreDtTm_)
        if self.NbOfTxs is not None:
            NbOfTxs_ = self.NbOfTxs
            etree_.SubElement(element,
                              '{http://www.six-interbank-clearing.com/de/pain.001.001.03.ch.02.xsd}NbOfTxs').text = self.gds_format_string(
                NbOfTxs_)
        if self.CtrlSum is not None:
            CtrlSum_ = self.CtrlSum
            etree_.SubElement(element,
                              '{http://www.six-interbank-clearing.com/de/pain.001.001.03.ch.02.xsd}CtrlSum').text = self.gds_format_float(
                CtrlSum_)
        if self.InitgPty is not None:
            InitgPty_ = self.InitgPty
            InitgPty_.to_etree(element, name_='InitgPty', mapping_=mapping_)
        if self.FwdgAgt is not None:
            FwdgAgt_ = self.FwdgAgt
            FwdgAgt_.to_etree(element, name_='FwdgAgt', mapping_=mapping_)
        if mapping_ is not None:
            mapping_[self] = element
        return element

    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self

    def buildAttributes(self, node, attrs, already_processed):
        pass

    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'MsgId':
            obj_ = None
            self.MsgId = obj_
            obj_.original_tagname_ = 'MsgId'
            # validate type Max35TextSwift
            self.validate_Max35TextSwift(self.MsgId)
        elif nodeName_ == 'CreDtTm':
            sval_ = child_.text
            dval_ = self.gds_parse_datetime(sval_)
            self.CreDtTm = dval_
            # validate type ISODateTime
            self.validate_ISODateTime(self.CreDtTm)
        elif nodeName_ == 'NbOfTxs':
            NbOfTxs_ = child_.text
            NbOfTxs_ = self.gds_validate_string(NbOfTxs_, node, 'NbOfTxs')
            self.NbOfTxs = NbOfTxs_
            # validate type Max15NumericText
            self.validate_Max15NumericText(self.NbOfTxs)
        elif nodeName_ == 'CtrlSum':
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'CtrlSum')
            self.CtrlSum = fval_
            # validate type DecimalNumber
            self.validate_DecimalNumber(self.CtrlSum)
        elif nodeName_ == 'InitgPty':
            obj_ = PartyIdentification32_CH_NameAndId.factory()
            obj_.build(child_)
            self.InitgPty = obj_
            obj_.original_tagname_ = 'InitgPty'
        elif nodeName_ == 'FwdgAgt':
            obj_ = None
            self.FwdgAgt = obj_
            obj_.original_tagname_ = 'FwdgAgt'
            # validate type Max70Text
            self.validate_Max70Text(self.FwdgAgt)


# end class GroupHeader32_CH


class PartyIdentification32_CH_NameAndId(GeneratedsSuper):
    member_data_items_ = {
        'Nm': MemberSpec_('Nm', ['Max70Text', 'BasicText-CH'], 0),
        'Id': MemberSpec_('Id', 'Party6Choice-CH', 0),
        'CtctDtls': MemberSpec_('CtctDtls', 'ContactDetails2-CH', 0),
    }
    subclass = None
    superclass = None

    def __init__(self, Nm=None, Id=None, CtctDtls=None):
        self.original_tagname_ = None
        self.Nm = Nm
        self.validate_Max70Text(self.Nm)
        self.Id = Id
        self.CtctDtls = CtctDtls

    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, PartyIdentification32_CH_NameAndId)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if PartyIdentification32_CH_NameAndId.subclass:
            return PartyIdentification32_CH_NameAndId.subclass(*args_, **kwargs_)
        else:
            return PartyIdentification32_CH_NameAndId(*args_, **kwargs_)

    factory = staticmethod(factory)

    def get_Nm(self):
        return self.Nm

    def set_Nm(self, Nm):
        self.Nm = Nm

    def get_Id(self):
        return self.Id

    def set_Id(self, Id):
        self.Id = Id

    def get_CtctDtls(self):
        return self.CtctDtls

    def set_CtctDtls(self, CtctDtls):
        self.CtctDtls = CtctDtls

    def validate_Max70Text(self, value):
        # Validate type Max70Text, a restriction on BasicText-CH.
        if value is not None and Validate_simpletypes_:
            if len(str(value)) > 70:
                warnings_.warn(
                    'Value "%(value)s" does not match xsd maxLength restriction on Max70Text' % {"value": value})
            if len(str(value)) < 1:
                warnings_.warn(
                    'Value "%(value)s" does not match xsd minLength restriction on Max70Text' % {"value": value})
            if not self.gds_validate_simple_patterns(
                    self.validate_Max70Text_patterns_, value):
                warnings_.warn('Value "%s" does not match xsd pattern restrictions: %s' % (
                value.encode('utf-8'), self.validate_Max70Text_patterns_,))

    validate_Max70Text_patterns_ = [[
                                        u'^([a-zA-Z0-9\\.,;:\'\\+\\-/\\(\\)?\\*\\[\\]\\{\\}\\\\`\xb4~ ]|[!"#%&<>\xf7=@_$\xa3]|[\xe0\xe1\xe2\xe4\xe7\xe8\xe9\xea\xeb\xec\xed\xee\xef\xf1\xf2\xf3\xf4\xf6\xf9\xfa\xfb\xfc\xfd\xdf\xc0\xc1\xc2\xc4\xc7\xc8\xc9\xca\xcb\xcc\xcd\xce\xcf\xd2\xd3\xd4\xd6\xd9\xda\xdb\xdc\xd1])*$']]

    def hasContent_(self):
        if (
                            self.Nm is not None or
                            self.Id is not None or
                        self.CtctDtls is not None
        ):
            return True
        else:
            return False

    def export(self, outfile, level, namespace_='', name_='PartyIdentification32-CH_NameAndId', namespacedef_='',
               pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '',))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='PartyIdentification32-CH_NameAndId')
        if self.hasContent_():
            outfile.write('>%s' % (eol_,))
            self.exportChildren(outfile, level + 1, namespace_='', name_='PartyIdentification32-CH_NameAndId',
                                pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_,))

    def exportAttributes(self, outfile, level, already_processed, namespace_='',
                         name_='PartyIdentification32-CH_NameAndId'):
        pass

    def exportChildren(self, outfile, level, namespace_='', name_='PartyIdentification32-CH_NameAndId',
                       fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Nm is not None:
            self.Nm.export(outfile, level, namespace_, name_='Nm', pretty_print=pretty_print)
        if self.Id is not None:
            self.Id.export(outfile, level, namespace_, name_='Id', pretty_print=pretty_print)
        if self.CtctDtls is not None:
            self.CtctDtls.export(outfile, level, namespace_, name_='CtctDtls', pretty_print=pretty_print)

    def to_etree(self, parent_element=None, name_='PartyIdentification32-CH_NameAndId', mapping_=None):
        if parent_element is None:
            element = etree_.Element('{http://www.six-interbank-clearing.com/de/pain.001.001.03.ch.02.xsd}' + name_)
        else:
            element = etree_.SubElement(parent_element,
                                        '{http://www.six-interbank-clearing.com/de/pain.001.001.03.ch.02.xsd}' + name_)
        if self.Nm is not None:
            Nm_ = self.Nm
            Nm_.to_etree(element, name_='Nm', mapping_=mapping_)
        if self.Id is not None:
            Id_ = self.Id
            Id_.to_etree(element, name_='Id', mapping_=mapping_)
        if self.CtctDtls is not None:
            CtctDtls_ = self.CtctDtls
            CtctDtls_.to_etree(element, name_='CtctDtls', mapping_=mapping_)
        if mapping_ is not None:
            mapping_[self] = element
        return element

    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self

    def buildAttributes(self, node, attrs, already_processed):
        pass

    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Nm':
            obj_ = None
            self.Nm = obj_
            obj_.original_tagname_ = 'Nm'
            # validate type Max70Text
            self.validate_Max70Text(self.Nm)
        elif nodeName_ == 'Id':
            obj_ = Party6Choice_CH.factory()
            obj_.build(child_)
            self.Id = obj_
            obj_.original_tagname_ = 'Id'
        elif nodeName_ == 'CtctDtls':
            obj_ = ContactDetails2_CH.factory()
            obj_.build(child_)
            self.CtctDtls = obj_
            obj_.original_tagname_ = 'CtctDtls'


# end class PartyIdentification32_CH_NameAndId


class Party6Choice_CH(GeneratedsSuper):
    member_data_items_ = {
        'OrgId': MemberSpec_('OrgId', 'OrganisationIdentification4-CH', 0),
        'PrvtId': MemberSpec_('PrvtId', 'PersonIdentification5-CH', 0),
    }
    subclass = None
    superclass = None

    def __init__(self, OrgId=None, PrvtId=None):
        self.original_tagname_ = None
        self.OrgId = OrgId
        self.PrvtId = PrvtId

    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, Party6Choice_CH)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if Party6Choice_CH.subclass:
            return Party6Choice_CH.subclass(*args_, **kwargs_)
        else:
            return Party6Choice_CH(*args_, **kwargs_)

    factory = staticmethod(factory)

    def get_OrgId(self):
        return self.OrgId

    def set_OrgId(self, OrgId):
        self.OrgId = OrgId

    def get_PrvtId(self):
        return self.PrvtId

    def set_PrvtId(self, PrvtId):
        self.PrvtId = PrvtId

    def hasContent_(self):
        if (
                        self.OrgId is not None or
                        self.PrvtId is not None
        ):
            return True
        else:
            return False

    def export(self, outfile, level, namespace_='', name_='Party6Choice-CH', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '',))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='Party6Choice-CH')
        if self.hasContent_():
            outfile.write('>%s' % (eol_,))
            self.exportChildren(outfile, level + 1, namespace_='', name_='Party6Choice-CH', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_,))

    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='Party6Choice-CH'):
        pass

    def exportChildren(self, outfile, level, namespace_='', name_='Party6Choice-CH', fromsubclass_=False,
                       pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.OrgId is not None:
            self.OrgId.export(outfile, level, namespace_, name_='OrgId', pretty_print=pretty_print)
        if self.PrvtId is not None:
            self.PrvtId.export(outfile, level, namespace_, name_='PrvtId', pretty_print=pretty_print)

    def to_etree(self, parent_element=None, name_='Party6Choice-CH', mapping_=None):
        if parent_element is None:
            element = etree_.Element('{http://www.six-interbank-clearing.com/de/pain.001.001.03.ch.02.xsd}' + name_)
        else:
            element = etree_.SubElement(parent_element,
                                        '{http://www.six-interbank-clearing.com/de/pain.001.001.03.ch.02.xsd}' + name_)
        if self.OrgId is not None:
            OrgId_ = self.OrgId
            OrgId_.to_etree(element, name_='OrgId', mapping_=mapping_)
        if self.PrvtId is not None:
            PrvtId_ = self.PrvtId
            PrvtId_.to_etree(element, name_='PrvtId', mapping_=mapping_)
        if mapping_ is not None:
            mapping_[self] = element
        return element

    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self

    def buildAttributes(self, node, attrs, already_processed):
        pass

    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'OrgId':
            obj_ = OrganisationIdentification4_CH.factory()
            obj_.build(child_)
            self.OrgId = obj_
            obj_.original_tagname_ = 'OrgId'
        elif nodeName_ == 'PrvtId':
            obj_ = PersonIdentification5_CH.factory()
            obj_.build(child_)
            self.PrvtId = obj_
            obj_.original_tagname_ = 'PrvtId'


# end class Party6Choice_CH


class ContactDetails2_CH(GeneratedsSuper):
    member_data_items_ = {
        'Nm': MemberSpec_('Nm', ['Max70Text', 'BasicText-CH'], 0),
        'Othr': MemberSpec_('Othr', ['Max35Text', 'BasicText-CH'], 0),
    }
    subclass = None
    superclass = None

    def __init__(self, Nm=None, Othr=None):
        self.original_tagname_ = None
        self.Nm = Nm
        self.validate_Max70Text(self.Nm)
        self.Othr = Othr
        self.validate_Max35Text(self.Othr)

    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ContactDetails2_CH)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ContactDetails2_CH.subclass:
            return ContactDetails2_CH.subclass(*args_, **kwargs_)
        else:
            return ContactDetails2_CH(*args_, **kwargs_)

    factory = staticmethod(factory)

    def get_Nm(self):
        return self.Nm

    def set_Nm(self, Nm):
        self.Nm = Nm

    def get_Othr(self):
        return self.Othr

    def set_Othr(self, Othr):
        self.Othr = Othr

    def validate_Max70Text(self, value):
        # Validate type Max70Text, a restriction on BasicText-CH.
        if value is not None and Validate_simpletypes_:
            if len(str(value)) > 70:
                warnings_.warn(
                    'Value "%(value)s" does not match xsd maxLength restriction on Max70Text' % {"value": value})
            if len(str(value)) < 1:
                warnings_.warn(
                    'Value "%(value)s" does not match xsd minLength restriction on Max70Text' % {"value": value})
            if not self.gds_validate_simple_patterns(
                    self.validate_Max70Text_patterns_, value):
                warnings_.warn('Value "%s" does not match xsd pattern restrictions: %s' % (
                value.encode('utf-8'), self.validate_Max70Text_patterns_,))

    validate_Max70Text_patterns_ = [[
                                        u'^([a-zA-Z0-9\\.,;:\'\\+\\-/\\(\\)?\\*\\[\\]\\{\\}\\\\`\xb4~ ]|[!"#%&<>\xf7=@_$\xa3]|[\xe0\xe1\xe2\xe4\xe7\xe8\xe9\xea\xeb\xec\xed\xee\xef\xf1\xf2\xf3\xf4\xf6\xf9\xfa\xfb\xfc\xfd\xdf\xc0\xc1\xc2\xc4\xc7\xc8\xc9\xca\xcb\xcc\xcd\xce\xcf\xd2\xd3\xd4\xd6\xd9\xda\xdb\xdc\xd1])*$']]

    def validate_Max35Text(self, value):
        # Validate type Max35Text, a restriction on BasicText-CH.
        if value is not None and Validate_simpletypes_:
            if len(str(value)) > 35:
                warnings_.warn(
                    'Value "%(value)s" does not match xsd maxLength restriction on Max35Text' % {"value": value})
            if len(str(value)) < 1:
                warnings_.warn(
                    'Value "%(value)s" does not match xsd minLength restriction on Max35Text' % {"value": value})
            if not self.gds_validate_simple_patterns(
                    self.validate_Max35Text_patterns_, value):
                warnings_.warn('Value "%s" does not match xsd pattern restrictions: %s' % (
                value.encode('utf-8'), self.validate_Max35Text_patterns_,))

    validate_Max35Text_patterns_ = [[
                                        u'^([a-zA-Z0-9\\.,;:\'\\+\\-/\\(\\)?\\*\\[\\]\\{\\}\\\\`\xb4~ ]|[!"#%&<>\xf7=@_$\xa3]|[\xe0\xe1\xe2\xe4\xe7\xe8\xe9\xea\xeb\xec\xed\xee\xef\xf1\xf2\xf3\xf4\xf6\xf9\xfa\xfb\xfc\xfd\xdf\xc0\xc1\xc2\xc4\xc7\xc8\xc9\xca\xcb\xcc\xcd\xce\xcf\xd2\xd3\xd4\xd6\xd9\xda\xdb\xdc\xd1])*$']]

    def hasContent_(self):
        if (
                        self.Nm is not None or
                        self.Othr is not None
        ):
            return True
        else:
            return False

    def export(self, outfile, level, namespace_='', name_='ContactDetails2-CH', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '',))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ContactDetails2-CH')
        if self.hasContent_():
            outfile.write('>%s' % (eol_,))
            self.exportChildren(outfile, level + 1, namespace_='', name_='ContactDetails2-CH',
                                pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_,))

    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ContactDetails2-CH'):
        pass

    def exportChildren(self, outfile, level, namespace_='', name_='ContactDetails2-CH', fromsubclass_=False,
                       pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Nm is not None:
            self.Nm.export(outfile, level, namespace_, name_='Nm', pretty_print=pretty_print)
        if self.Othr is not None:
            self.Othr.export(outfile, level, namespace_, name_='Othr', pretty_print=pretty_print)

    def to_etree(self, parent_element=None, name_='ContactDetails2-CH', mapping_=None):
        if parent_element is None:
            element = etree_.Element('{http://www.six-interbank-clearing.com/de/pain.001.001.03.ch.02.xsd}' + name_)
        else:
            element = etree_.SubElement(parent_element,
                                        '{http://www.six-interbank-clearing.com/de/pain.001.001.03.ch.02.xsd}' + name_)
        if self.Nm is not None:
            Nm_ = self.Nm
            Nm_.to_etree(element, name_='Nm', mapping_=mapping_)
        if self.Othr is not None:
            Othr_ = self.Othr
            Othr_.to_etree(element, name_='Othr', mapping_=mapping_)
        if mapping_ is not None:
            mapping_[self] = element
        return element

    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self

    def buildAttributes(self, node, attrs, already_processed):
        pass

    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Nm':
            obj_ = None
            self.Nm = obj_
            obj_.original_tagname_ = 'Nm'
            # validate type Max70Text
            self.validate_Max70Text(self.Nm)
        elif nodeName_ == 'Othr':
            obj_ = None
            self.Othr = obj_
            obj_.original_tagname_ = 'Othr'
            # validate type Max35Text
            self.validate_Max35Text(self.Othr)


# end class ContactDetails2_CH


class OrganisationIdentification4_CH(GeneratedsSuper):
    member_data_items_ = {
        'BICOrBEI': MemberSpec_('BICOrBEI', ['AnyBICIdentifier', 'xs:string'], 0),
        'Othr': MemberSpec_('Othr', ['Max70Text', 'BasicText-CH'], 0),
    }
    subclass = None
    superclass = None

    def __init__(self, BICOrBEI=None, Othr=None):
        self.original_tagname_ = None
        self.BICOrBEI = BICOrBEI
        self.validate_AnyBICIdentifier(self.BICOrBEI)
        self.Othr = Othr
        self.validate_Max70Text(self.Othr)

    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, OrganisationIdentification4_CH)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if OrganisationIdentification4_CH.subclass:
            return OrganisationIdentification4_CH.subclass(*args_, **kwargs_)
        else:
            return OrganisationIdentification4_CH(*args_, **kwargs_)

    factory = staticmethod(factory)

    def get_BICOrBEI(self):
        return self.BICOrBEI

    def set_BICOrBEI(self, BICOrBEI):
        self.BICOrBEI = BICOrBEI

    def get_Othr(self):
        return self.Othr

    def set_Othr(self, Othr):
        self.Othr = Othr

    def validate_AnyBICIdentifier(self, value):
        # Validate type AnyBICIdentifier, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            if not self.gds_validate_simple_patterns(
                    self.validate_AnyBICIdentifier_patterns_, value):
                warnings_.warn('Value "%s" does not match xsd pattern restrictions: %s' % (
                value.encode('utf-8'), self.validate_AnyBICIdentifier_patterns_,))

    validate_AnyBICIdentifier_patterns_ = [['^[A-Z]{6,6}[A-Z2-9][A-NP-Z0-9]([A-Z0-9]{3,3}){0,1}$']]

    def validate_Max70Text(self, value):
        # Validate type Max70Text, a restriction on BasicText-CH.
        if value is not None and Validate_simpletypes_:
            if len(str(value)) > 70:
                warnings_.warn(
                    'Value "%(value)s" does not match xsd maxLength restriction on Max70Text' % {"value": value})
            if len(str(value)) < 1:
                warnings_.warn(
                    'Value "%(value)s" does not match xsd minLength restriction on Max70Text' % {"value": value})
            if not self.gds_validate_simple_patterns(
                    self.validate_Max70Text_patterns_, value):
                warnings_.warn('Value "%s" does not match xsd pattern restrictions: %s' % (
                value.encode('utf-8'), self.validate_Max70Text_patterns_,))

    validate_Max70Text_patterns_ = [[
                                        u'^([a-zA-Z0-9\\.,;:\'\\+\\-/\\(\\)?\\*\\[\\]\\{\\}\\\\`\xb4~ ]|[!"#%&<>\xf7=@_$\xa3]|[\xe0\xe1\xe2\xe4\xe7\xe8\xe9\xea\xeb\xec\xed\xee\xef\xf1\xf2\xf3\xf4\xf6\xf9\xfa\xfb\xfc\xfd\xdf\xc0\xc1\xc2\xc4\xc7\xc8\xc9\xca\xcb\xcc\xcd\xce\xcf\xd2\xd3\xd4\xd6\xd9\xda\xdb\xdc\xd1])*$']]

    def hasContent_(self):
        if (
                        self.BICOrBEI is not None or
                        self.Othr is not None
        ):
            return True
        else:
            return False

    def export(self, outfile, level, namespace_='', name_='OrganisationIdentification4-CH', namespacedef_='',
               pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '',))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='OrganisationIdentification4-CH')
        if self.hasContent_():
            outfile.write('>%s' % (eol_,))
            self.exportChildren(outfile, level + 1, namespace_='', name_='OrganisationIdentification4-CH',
                                pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_,))

    def exportAttributes(self, outfile, level, already_processed, namespace_='',
                         name_='OrganisationIdentification4-CH'):
        pass

    def exportChildren(self, outfile, level, namespace_='', name_='OrganisationIdentification4-CH', fromsubclass_=False,
                       pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.BICOrBEI is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sBICOrBEI>%s</%sBICOrBEI>%s' % (
            namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.BICOrBEI), input_name='BICOrBEI')),
            namespace_, eol_))
        if self.Othr is not None:
            self.Othr.export(outfile, level, namespace_, name_='Othr', pretty_print=pretty_print)

    def to_etree(self, parent_element=None, name_='OrganisationIdentification4-CH', mapping_=None):
        if parent_element is None:
            element = etree_.Element('{http://www.six-interbank-clearing.com/de/pain.001.001.03.ch.02.xsd}' + name_)
        else:
            element = etree_.SubElement(parent_element,
                                        '{http://www.six-interbank-clearing.com/de/pain.001.001.03.ch.02.xsd}' + name_)
        if self.BICOrBEI is not None:
            BICOrBEI_ = self.BICOrBEI
            etree_.SubElement(element,
                              '{http://www.six-interbank-clearing.com/de/pain.001.001.03.ch.02.xsd}BICOrBEI').text = self.gds_format_string(
                BICOrBEI_)
        if self.Othr is not None:
            Othr_ = self.Othr
            Othr_.to_etree(element, name_='Othr', mapping_=mapping_)
        if mapping_ is not None:
            mapping_[self] = element
        return element

    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self

    def buildAttributes(self, node, attrs, already_processed):
        pass

    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'BICOrBEI':
            BICOrBEI_ = child_.text
            BICOrBEI_ = self.gds_validate_string(BICOrBEI_, node, 'BICOrBEI')
            self.BICOrBEI = BICOrBEI_
            # validate type AnyBICIdentifier
            self.validate_AnyBICIdentifier(self.BICOrBEI)
        elif nodeName_ == 'Othr':
            obj_ = None
            self.Othr = obj_
            obj_.original_tagname_ = 'Othr'
            # validate type Max70Text
            self.validate_Max70Text(self.Othr)


# end class OrganisationIdentification4_CH


class PersonIdentification5_CH(GeneratedsSuper):
    member_data_items_ = {
        'DtAndPlcOfBirth': MemberSpec_('DtAndPlcOfBirth', 'DateAndPlaceOfBirth', 0),
        'Othr': MemberSpec_('Othr', ['Max70Text', 'BasicText-CH'], 0),
    }
    subclass = None
    superclass = None

    def __init__(self, DtAndPlcOfBirth=None, Othr=None):
        self.original_tagname_ = None
        self.DtAndPlcOfBirth = DtAndPlcOfBirth
        self.Othr = Othr
        self.validate_Max70Text(self.Othr)

    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, PersonIdentification5_CH)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if PersonIdentification5_CH.subclass:
            return PersonIdentification5_CH.subclass(*args_, **kwargs_)
        else:
            return PersonIdentification5_CH(*args_, **kwargs_)

    factory = staticmethod(factory)

    def get_DtAndPlcOfBirth(self):
        return self.DtAndPlcOfBirth

    def set_DtAndPlcOfBirth(self, DtAndPlcOfBirth):
        self.DtAndPlcOfBirth = DtAndPlcOfBirth

    def get_Othr(self):
        return self.Othr

    def set_Othr(self, Othr):
        self.Othr = Othr

    def validate_Max70Text(self, value):
        # Validate type Max70Text, a restriction on BasicText-CH.
        if value is not None and Validate_simpletypes_:
            if len(str(value)) > 70:
                warnings_.warn(
                    'Value "%(value)s" does not match xsd maxLength restriction on Max70Text' % {"value": value})
            if len(str(value)) < 1:
                warnings_.warn(
                    'Value "%(value)s" does not match xsd minLength restriction on Max70Text' % {"value": value})
            if not self.gds_validate_simple_patterns(
                    self.validate_Max70Text_patterns_, value):
                warnings_.warn('Value "%s" does not match xsd pattern restrictions: %s' % (
                value.encode('utf-8'), self.validate_Max70Text_patterns_,))

    validate_Max70Text_patterns_ = [[
                                        u'^([a-zA-Z0-9\\.,;:\'\\+\\-/\\(\\)?\\*\\[\\]\\{\\}\\\\`\xb4~ ]|[!"#%&<>\xf7=@_$\xa3]|[\xe0\xe1\xe2\xe4\xe7\xe8\xe9\xea\xeb\xec\xed\xee\xef\xf1\xf2\xf3\xf4\xf6\xf9\xfa\xfb\xfc\xfd\xdf\xc0\xc1\xc2\xc4\xc7\xc8\xc9\xca\xcb\xcc\xcd\xce\xcf\xd2\xd3\xd4\xd6\xd9\xda\xdb\xdc\xd1])*$']]

    def hasContent_(self):
        if (
                        self.DtAndPlcOfBirth is not None or
                        self.Othr is not None
        ):
            return True
        else:
            return False

    def export(self, outfile, level, namespace_='', name_='PersonIdentification5-CH', namespacedef_='',
               pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '',))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='PersonIdentification5-CH')
        if self.hasContent_():
            outfile.write('>%s' % (eol_,))
            self.exportChildren(outfile, level + 1, namespace_='', name_='PersonIdentification5-CH',
                                pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_,))

    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='PersonIdentification5-CH'):
        pass

    def exportChildren(self, outfile, level, namespace_='', name_='PersonIdentification5-CH', fromsubclass_=False,
                       pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.DtAndPlcOfBirth is not None:
            self.DtAndPlcOfBirth.export(outfile, level, namespace_, name_='DtAndPlcOfBirth', pretty_print=pretty_print)
        if self.Othr is not None:
            self.Othr.export(outfile, level, namespace_, name_='Othr', pretty_print=pretty_print)

    def to_etree(self, parent_element=None, name_='PersonIdentification5-CH', mapping_=None):
        if parent_element is None:
            element = etree_.Element('{http://www.six-interbank-clearing.com/de/pain.001.001.03.ch.02.xsd}' + name_)
        else:
            element = etree_.SubElement(parent_element,
                                        '{http://www.six-interbank-clearing.com/de/pain.001.001.03.ch.02.xsd}' + name_)
        if self.DtAndPlcOfBirth is not None:
            DtAndPlcOfBirth_ = self.DtAndPlcOfBirth
            DtAndPlcOfBirth_.to_etree(element, name_='DtAndPlcOfBirth', mapping_=mapping_)
        if self.Othr is not None:
            Othr_ = self.Othr
            Othr_.to_etree(element, name_='Othr', mapping_=mapping_)
        if mapping_ is not None:
            mapping_[self] = element
        return element

    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self

    def buildAttributes(self, node, attrs, already_processed):
        pass

    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'DtAndPlcOfBirth':
            obj_ = DateAndPlaceOfBirth.factory()
            obj_.build(child_)
            self.DtAndPlcOfBirth = obj_
            obj_.original_tagname_ = 'DtAndPlcOfBirth'
        elif nodeName_ == 'Othr':
            obj_ = None
            self.Othr = obj_
            obj_.original_tagname_ = 'Othr'
            # validate type Max70Text
            self.validate_Max70Text(self.Othr)


# end class PersonIdentification5_CH


class DateAndPlaceOfBirth(GeneratedsSuper):
    member_data_items_ = {
        'BirthDt': MemberSpec_('BirthDt', ['ISODate', 'xs:date'], 0),
        'PrvcOfBirth': MemberSpec_('PrvcOfBirth', ['Max35Text', 'BasicText-CH'], 0),
        'CityOfBirth': MemberSpec_('CityOfBirth', ['Max35Text', 'BasicText-CH'], 0),
        'CtryOfBirth': MemberSpec_('CtryOfBirth', ['CountryCode', 'xs:string'], 0),
    }
    subclass = None
    superclass = None

    def __init__(self, BirthDt=None, PrvcOfBirth=None, CityOfBirth=None, CtryOfBirth=None):
        self.original_tagname_ = None
        if isinstance(BirthDt, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(BirthDt, '%Y-%m-%d').date()
        else:
            initvalue_ = BirthDt
        self.BirthDt = initvalue_
        self.PrvcOfBirth = PrvcOfBirth
        self.validate_Max35Text(self.PrvcOfBirth)
        self.CityOfBirth = CityOfBirth
        self.validate_Max35Text(self.CityOfBirth)
        self.CtryOfBirth = CtryOfBirth
        self.validate_CountryCode(self.CtryOfBirth)

    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, DateAndPlaceOfBirth)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if DateAndPlaceOfBirth.subclass:
            return DateAndPlaceOfBirth.subclass(*args_, **kwargs_)
        else:
            return DateAndPlaceOfBirth(*args_, **kwargs_)

    factory = staticmethod(factory)

    def get_BirthDt(self):
        return self.BirthDt

    def set_BirthDt(self, BirthDt):
        self.BirthDt = BirthDt

    def get_PrvcOfBirth(self):
        return self.PrvcOfBirth

    def set_PrvcOfBirth(self, PrvcOfBirth):
        self.PrvcOfBirth = PrvcOfBirth

    def get_CityOfBirth(self):
        return self.CityOfBirth

    def set_CityOfBirth(self, CityOfBirth):
        self.CityOfBirth = CityOfBirth

    def get_CtryOfBirth(self):
        return self.CtryOfBirth

    def set_CtryOfBirth(self, CtryOfBirth):
        self.CtryOfBirth = CtryOfBirth

    def validate_ISODate(self, value):
        # Validate type ISODate, a restriction on xs:date.
        if value is not None and Validate_simpletypes_:
            pass

    def validate_Max35Text(self, value):
        # Validate type Max35Text, a restriction on BasicText-CH.
        if value is not None and Validate_simpletypes_:
            if len(str(value)) > 35:
                warnings_.warn(
                    'Value "%(value)s" does not match xsd maxLength restriction on Max35Text' % {"value": value})
            if len(str(value)) < 1:
                warnings_.warn(
                    'Value "%(value)s" does not match xsd minLength restriction on Max35Text' % {"value": value})
            if not self.gds_validate_simple_patterns(
                    self.validate_Max35Text_patterns_, value):
                warnings_.warn('Value "%s" does not match xsd pattern restrictions: %s' % (
                value.encode('utf-8'), self.validate_Max35Text_patterns_,))

    validate_Max35Text_patterns_ = [[
                                        u'^([a-zA-Z0-9\\.,;:\'\\+\\-/\\(\\)?\\*\\[\\]\\{\\}\\\\`\xb4~ ]|[!"#%&<>\xf7=@_$\xa3]|[\xe0\xe1\xe2\xe4\xe7\xe8\xe9\xea\xeb\xec\xed\xee\xef\xf1\xf2\xf3\xf4\xf6\xf9\xfa\xfb\xfc\xfd\xdf\xc0\xc1\xc2\xc4\xc7\xc8\xc9\xca\xcb\xcc\xcd\xce\xcf\xd2\xd3\xd4\xd6\xd9\xda\xdb\xdc\xd1])*$']]

    def validate_CountryCode(self, value):
        # Validate type CountryCode, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            if not self.gds_validate_simple_patterns(
                    self.validate_CountryCode_patterns_, value):
                warnings_.warn('Value "%s" does not match xsd pattern restrictions: %s' % (
                value.encode('utf-8'), self.validate_CountryCode_patterns_,))

    validate_CountryCode_patterns_ = [['^[A-Z]{2,2}$']]

    def hasContent_(self):
        if (
                                self.BirthDt is not None or
                                self.PrvcOfBirth is not None or
                            self.CityOfBirth is not None or
                        self.CtryOfBirth is not None
        ):
            return True
        else:
            return False

    def export(self, outfile, level, namespace_='', name_='DateAndPlaceOfBirth', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '',))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='DateAndPlaceOfBirth')
        if self.hasContent_():
            outfile.write('>%s' % (eol_,))
            self.exportChildren(outfile, level + 1, namespace_='', name_='DateAndPlaceOfBirth',
                                pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_,))

    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='DateAndPlaceOfBirth'):
        pass

    def exportChildren(self, outfile, level, namespace_='', name_='DateAndPlaceOfBirth', fromsubclass_=False,
                       pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.BirthDt is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sBirthDt>%s</%sBirthDt>%s' % (
            namespace_, self.gds_format_date(self.BirthDt, input_name='BirthDt'), namespace_, eol_))
        if self.PrvcOfBirth is not None:
            self.PrvcOfBirth.export(outfile, level, namespace_, name_='PrvcOfBirth', pretty_print=pretty_print)
        if self.CityOfBirth is not None:
            self.CityOfBirth.export(outfile, level, namespace_, name_='CityOfBirth', pretty_print=pretty_print)
        if self.CtryOfBirth is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCtryOfBirth>%s</%sCtryOfBirth>%s' % (
            namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.CtryOfBirth), input_name='CtryOfBirth')),
            namespace_, eol_))

    def to_etree(self, parent_element=None, name_='DateAndPlaceOfBirth', mapping_=None):
        if parent_element is None:
            element = etree_.Element('{http://www.six-interbank-clearing.com/de/pain.001.001.03.ch.02.xsd}' + name_)
        else:
            element = etree_.SubElement(parent_element,
                                        '{http://www.six-interbank-clearing.com/de/pain.001.001.03.ch.02.xsd}' + name_)
        if self.BirthDt is not None:
            BirthDt_ = self.BirthDt
            etree_.SubElement(element,
                              '{http://www.six-interbank-clearing.com/de/pain.001.001.03.ch.02.xsd}BirthDt').text = self.gds_format_date(
                BirthDt_)
        if self.PrvcOfBirth is not None:
            PrvcOfBirth_ = self.PrvcOfBirth
            PrvcOfBirth_.to_etree(element, name_='PrvcOfBirth', mapping_=mapping_)
        if self.CityOfBirth is not None:
            CityOfBirth_ = self.CityOfBirth
            CityOfBirth_.to_etree(element, name_='CityOfBirth', mapping_=mapping_)
        if self.CtryOfBirth is not None:
            CtryOfBirth_ = self.CtryOfBirth
            etree_.SubElement(element,
                              '{http://www.six-interbank-clearing.com/de/pain.001.001.03.ch.02.xsd}CtryOfBirth').text = self.gds_format_string(
                CtryOfBirth_)
        if mapping_ is not None:
            mapping_[self] = element
        return element

    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self

    def buildAttributes(self, node, attrs, already_processed):
        pass

    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'BirthDt':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.BirthDt = dval_
            # validate type ISODate
            self.validate_ISODate(self.BirthDt)
        elif nodeName_ == 'PrvcOfBirth':
            obj_ = None
            self.PrvcOfBirth = obj_
            obj_.original_tagname_ = 'PrvcOfBirth'
            # validate type Max35Text
            self.validate_Max35Text(self.PrvcOfBirth)
        elif nodeName_ == 'CityOfBirth':
            obj_ = None
            self.CityOfBirth = obj_
            obj_.original_tagname_ = 'CityOfBirth'
            # validate type Max35Text
            self.validate_Max35Text(self.CityOfBirth)
        elif nodeName_ == 'CtryOfBirth':
            CtryOfBirth_ = child_.text
            CtryOfBirth_ = self.gds_validate_string(CtryOfBirth_, node, 'CtryOfBirth')
            self.CtryOfBirth = CtryOfBirth_
            # validate type CountryCode
            self.validate_CountryCode(self.CtryOfBirth)


# end class DateAndPlaceOfBirth


GDSClassesMapping = {
    'CstmrCdtTrfInitn': CustomerCreditTransferInitiationV03_CH,
    'CtctDtls': ContactDetails2_CH,
    'DtAndPlcOfBirth': DateAndPlaceOfBirth,
    'GrpHdr': GroupHeader32_CH,
    'Id': Party6Choice_CH,
    'InitgPty': PartyIdentification32_CH_NameAndId,
    'OrgId': OrganisationIdentification4_CH,
    'PmtInf': PaymentInstructionInformation3_CH,
    'PrvtId': PersonIdentification5_CH,
}

USAGE_TEXT = """
Usage: python <Parser>.py [ -s ] <in_xml_file>
"""


def usage():
    print(USAGE_TEXT)
    sys.exit(1)


def get_root_tag(node):
    tag = Tag_pattern_.match(node.tag).groups()[-1]
    rootClass = GDSClassesMapping.get(tag)
    if rootClass is None:
        rootClass = globals().get(tag)
    return tag, rootClass


def parse(inFileName, silence=False):
    parser = None
    doc = parsexml_(inFileName, parser)
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'Document'
        rootClass = Document
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    if not silence:
        sys.stdout.write('<?xml version="1.0" ?>\n')
        rootObj.export(
            sys.stdout, 0, name_=rootTag,
            namespacedef_='',
            pretty_print=True)
    return rootObj


def parseEtree(inFileName, silence=False):
    parser = None
    doc = parsexml_(inFileName, parser)
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'Document'
        rootClass = Document
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    mapping = {}
    rootElement = rootObj.to_etree(None, name_=rootTag, mapping_=mapping)
    reverse_mapping = rootObj.gds_reverse_node_mapping(mapping)
    if not silence:
        content = etree_.tostring(
            rootElement, pretty_print=True,
            xml_declaration=True, encoding="utf-8")
        sys.stdout.write(content)
        sys.stdout.write('\n')
    return rootObj, rootElement, mapping, reverse_mapping


def parseString(inString, silence=False):
    from StringIO import StringIO
    parser = None
    doc = parsexml_(StringIO(inString), parser)
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'Document'
        rootClass = Document
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    if not silence:
        sys.stdout.write('<?xml version="1.0" ?>\n')
        rootObj.export(
            sys.stdout, 0, name_=rootTag,
            namespacedef_='')
    return rootObj


def parseLiteral(inFileName, silence=False):
    parser = None
    doc = parsexml_(inFileName, parser)
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'Document'
        rootClass = Document
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    if not silence:
        sys.stdout.write('#from pain001_cut import *\n\n')
        sys.stdout.write('import pain001_cut as model_\n\n')
        sys.stdout.write('rootObj = model_.rootClass(\n')
        rootObj.exportLiteral(sys.stdout, 0, name_=rootTag)
        sys.stdout.write(')\n')
    return rootObj


def main():
    args = sys.argv[1:]
    if len(args) == 1:
        parse(args[0])
    else:
        usage()


if __name__ == '__main__':
    # import pdb; pdb.set_trace()
    main()

__all__ = [
    "ContactDetails2_CH",
    "CustomerCreditTransferInitiationV03_CH",
    "DateAndPlaceOfBirth",
    "Document",
    "GroupHeader32_CH",
    "OrganisationIdentification4_CH",
    "Party6Choice_CH",
    "PartyIdentification32_CH_NameAndId",
    "PaymentInstructionInformation3_CH",
    "PersonIdentification5_CH"
]
